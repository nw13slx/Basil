#def read_pdos():
#  if ( dosf == None):
#      return "End, DOSCARfile is not opened yet"
#  global ncols 
#  start = dosf.tell()
#  line = dosf.readline()
#  line = dosf.readline().strip().split()
#  ncols= int(len(line))
#  dosf.seek(start)
#  if !(ncols==7 or ncols==19 or ncols==9 or ncols==33):
#      return "End, DOSCARfile do not have spin component"
#  return None
#def read_dos0():
#  #attempt to read the first line and analysis the number of column
#  ef = np.zeros(nedos)
#  Current=np.zeros((nedos,2))
#
#  #write the DOS0 file
#  chunck = []
#  for n in xrange(nedos):
#      chunck.append(f.readline())
#  global dos0 = np.loadtxt(chunck)
#
#def read_parorbit():
#  if  ((np.sum(par_element)==-4) and (peratom==False)):
#    return "END no partial orbital is needed"
#  nsites = (ncols -1)/2
#  for i in range(4):
#    if ((par_element[i]>=0) and (nsites<(2*i+1)):
#        return "END, nsites is smaller than the required orbital"
#
#  global d_t2g,d_eg, par_orbital,perelement
#  if (par_element[2]>=0):
#    d_t2g=np.zeros((nedos,2))
#    d_eg=np.zeros((nedos,2))
#  else:
#    d_t2g=None
#    d_eg=None
#  par_orbital=[] #store the partial s, p, d, f orbital
#  for i in range(4):
#    if par_element[i]>=0:
#      par_orbital+=[np.zeros((nedos,2))]
#    else:
#      par_orbital+=[None]
#  perelement=np.zeros((nedos,ntype))
#
#  for atomi in xrange(natoms):
#    #skip the first line, and loop over nedos
#    xEnergy,tot,partial=read_atomDOS(dosf)
#
#    if (atomSpe[atomi] == par_element[0]):
#      par_orbital[0][:,0]+=partial[:,0]
#      par_orbital[0][:,1]-=partial[:,1]
#    if (atomSpe[atomi] == par_element[1]):
#      par_orbital[1][:,0]+=partial[:,2]
#      par_orbital[1][:,1]-=partial[:,3]
#    if (atomSpe[atomi] == par_element[2]):
#      par_orbital[2][:,0]+=partial[:,4]
#      par_orbital[2][:,1]-=partial[:,5]
#      d_t2g[:,0]+=partial[:,8]
#      d_t2g[:,1]-=partial[:,9]
#      d_eg[:,0]+=partial[:,10]
#      d_eg[:,1]-=partial[:,11]
#    if (atomSpe[atomi] == par_element[3]):
#      par_orbital[3][:,0]+=partial[:,6]
#      par_orbital[3][:,1]-=partial[:,7]
#    All[:,atomSpe[atomi]] += tot[:,0] + tot[:,1]
#
#    #print data and png per atom
#    if (peratom==True):
#      matrix = np.hstack([xEnergy.reshape([len(xEnergy),1]),partial])
#      header_line="#"+name+"atom"+str(atomi)+"\n#E su sd pu pd du dd fu fd dt2gu dt2gd degu degd"
#      np.savetxt(name+'DOS'+str(atomi)+".dat",matrix,fmt='%15.8f',header=header_line)
#
#def read_atomDOS(pdosf)
#    line = pdosf.readline()
#    chunck=[]
#    for n in xrange(nedos):
#      chunck.append(pdosf.readline())
#    element = np.loadtxt(chunck)
#
#    xEnergy=np.zeros(nedos)
#    tot=np.zeros((nedos,2))
#    partial=np.zeros((nedos,12)) #s,p,d,f,dt2g,deg
#    for site in range(nsites):
#      tot[:,0] += element[:,site*2+1]
#      tot[:,1] += element[:,site*2+2]
#    xEnergy = element[:,0]
#    #collection, s, p, d, f, dt2g, deg
#    partial[:,0]=element[:,1] #s
#    partial[:,1]=element[:,2] #s
#    partial[:,2]=element[:,3] + element[:,5] + element[:,7] #p
#    partial[:,3]=element[:,4] + element[:,6] + element[:,8] #p
#    partial[:,4]=element[:,9] + element[:,11] + element[:,13] + element[:,15] + element[:,17]
#    partial[:,5]=element[:,10] + element[:,12] + element[:,14] + element[:,16] + element[:,18]
#    partial[:,6]=element[:,19] + element[:,21] + element[:,23] + element[:,25] + element[:,27]+element[:,29]+element[:,31]
#    partial[:,7]=(element[:,20] + element[:,22] + element[:,24] + element[:,26] + element[:,28]+element[:,30]+element[:,32])
#    partial[:,8]=element[:,9] + element[:,11] + element[:,15]
#    partial[:,9]=element[:,10] + element[:,12] + element[:,16]
#    partial[:,10]=element[:,13] + element[:,17]
#    partial[:,11]=element[:,14] + element[:,18]
#    return xEnergy,tot,partial
